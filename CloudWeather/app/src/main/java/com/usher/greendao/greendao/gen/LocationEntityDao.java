package com.usher.greendao.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.aphrodite.cloudweather.database.entity.LocationEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCATION_ENTITY".
*/
public class LocationEntityDao extends AbstractDao<LocationEntity, Void> {

    public static final String TABLENAME = "LOCATION_ENTITY";

    /**
     * Properties of entity LocationEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Lng = new Property(0, double.class, "lng", false, "longitude");
        public final static Property Lat = new Property(1, double.class, "lat", false, "latitude");
        public final static Property Formatted_address = new Property(2, String.class, "formatted_address", false, "formatted_address");
        public final static Property Business = new Property(3, String.class, "business", false, "business");
        public final static Property City = new Property(4, String.class, "city", false, "city");
        public final static Property Direction = new Property(5, String.class, "direction", false, "direction");
        public final static Property Distance = new Property(6, String.class, "distance", false, "distance");
        public final static Property District = new Property(7, String.class, "district", false, "district");
        public final static Property Province = new Property(8, String.class, "province", false, "province");
        public final static Property Street = new Property(9, String.class, "street", false, "street");
        public final static Property Street_number = new Property(10, String.class, "street_number", false, "street_number");
        public final static Property CityCode = new Property(11, int.class, "cityCode", false, "city_code");
    }


    public LocationEntityDao(DaoConfig config) {
        super(config);
    }
    
    public LocationEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCATION_ENTITY\" (" + //
                "\"longitude\" REAL NOT NULL ," + // 0: lng
                "\"latitude\" REAL NOT NULL ," + // 1: lat
                "\"formatted_address\" TEXT," + // 2: formatted_address
                "\"business\" TEXT," + // 3: business
                "\"city\" TEXT," + // 4: city
                "\"direction\" TEXT," + // 5: direction
                "\"distance\" TEXT," + // 6: distance
                "\"district\" TEXT," + // 7: district
                "\"province\" TEXT," + // 8: province
                "\"street\" TEXT," + // 9: street
                "\"street_number\" TEXT," + // 10: street_number
                "\"city_code\" INTEGER NOT NULL );"); // 11: cityCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCATION_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocationEntity entity) {
        stmt.clearBindings();
        stmt.bindDouble(1, entity.getLng());
        stmt.bindDouble(2, entity.getLat());
 
        String formatted_address = entity.getFormatted_address();
        if (formatted_address != null) {
            stmt.bindString(3, formatted_address);
        }
 
        String business = entity.getBusiness();
        if (business != null) {
            stmt.bindString(4, business);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(5, city);
        }
 
        String direction = entity.getDirection();
        if (direction != null) {
            stmt.bindString(6, direction);
        }
 
        String distance = entity.getDistance();
        if (distance != null) {
            stmt.bindString(7, distance);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(8, district);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(9, province);
        }
 
        String street = entity.getStreet();
        if (street != null) {
            stmt.bindString(10, street);
        }
 
        String street_number = entity.getStreet_number();
        if (street_number != null) {
            stmt.bindString(11, street_number);
        }
        stmt.bindLong(12, entity.getCityCode());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocationEntity entity) {
        stmt.clearBindings();
        stmt.bindDouble(1, entity.getLng());
        stmt.bindDouble(2, entity.getLat());
 
        String formatted_address = entity.getFormatted_address();
        if (formatted_address != null) {
            stmt.bindString(3, formatted_address);
        }
 
        String business = entity.getBusiness();
        if (business != null) {
            stmt.bindString(4, business);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(5, city);
        }
 
        String direction = entity.getDirection();
        if (direction != null) {
            stmt.bindString(6, direction);
        }
 
        String distance = entity.getDistance();
        if (distance != null) {
            stmt.bindString(7, distance);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(8, district);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(9, province);
        }
 
        String street = entity.getStreet();
        if (street != null) {
            stmt.bindString(10, street);
        }
 
        String street_number = entity.getStreet_number();
        if (street_number != null) {
            stmt.bindString(11, street_number);
        }
        stmt.bindLong(12, entity.getCityCode());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public LocationEntity readEntity(Cursor cursor, int offset) {
        LocationEntity entity = new LocationEntity( //
            cursor.getDouble(offset + 0), // lng
            cursor.getDouble(offset + 1), // lat
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // formatted_address
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // business
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // city
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // direction
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // distance
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // district
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // province
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // street
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // street_number
            cursor.getInt(offset + 11) // cityCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocationEntity entity, int offset) {
        entity.setLng(cursor.getDouble(offset + 0));
        entity.setLat(cursor.getDouble(offset + 1));
        entity.setFormatted_address(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBusiness(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCity(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDirection(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDistance(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDistrict(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setProvince(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStreet(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStreet_number(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCityCode(cursor.getInt(offset + 11));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(LocationEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(LocationEntity entity) {
        return null;
    }

    @Override
    public boolean hasKey(LocationEntity entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
